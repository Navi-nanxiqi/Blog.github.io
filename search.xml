<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Add Page</title>
      <link href="/2025/08/21/add-deploy/"/>
      <url>/2025/08/21/add-deploy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>一、进程间通信</h1><h3 id="1-目的">1 目的</h3><blockquote><ul><li>数据传输：一个进程需要将其数据发送给另一个进程</li><li>资源共享：多个进程间共享同样的资源</li><li>通知机制：一个进程需要向另一个或另一组进程发送消息，通知其发生了某些事</li><li>进程控制：有些进程需要完全控制另一个进程的执行，此时控制进程希望可以拦截另一个进程的所有陷入和异常，且可以及时知道它的状态改变。</li></ul></blockquote><h3 id="2-发展">2 发展</h3><blockquote><ul><li>管道</li><li>System V进程间通信</li><li>POSIX进程间通信</li></ul></blockquote><h3 id="3-分类">3 分类</h3><blockquote><p>管道</p><ul><li>匿名管道pipe</li><li>命名管道</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Add Page</title>
      <link href="/2025/08/21/addpage/"/>
      <url>/2025/08/21/addpage/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>一、进程间通信</h1><h3 id="1-目的">1 目的</h3><blockquote><ul><li>数据传输：一个进程需要将其数据发送给另一个进程</li><li>资源共享：多个进程间共享同样的资源</li><li>通知机制：一个进程需要向另一个或另一组进程发送消息，通知其发生了某些事</li><li>进程控制：有些进程需要完全控制另一个进程的执行，此时控制进程希望可以拦截另一个进程的所有陷入和异常，且可以及时知道它的状态改变。</li></ul></blockquote><h3 id="2-发展">2 发展</h3><blockquote><ul><li>管道</li><li>System V进程间通信</li><li>POSIX进程间通信</li></ul></blockquote><h3 id="3-分类">3 分类</h3><blockquote><p>管道</p><ul><li>匿名管道pipe</li><li>命名管道</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Test-Page</title>
      <link href="/2025/08/21/example/"/>
      <url>/2025/08/21/example/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1>容器技术基础</h1><h2 id="容器的本质与核心技术">容器的本质与核心技术</h2><p>容器本质上是受资源限制、彼此隔离的 Linux 进程集合，其核心目标是实现应用在沙箱环境中的独立运行。支撑容器技术的三大核心技术包括：</p><ul><li><code>Namespace</code>：（实现资源隔离），包括 PID（进程）、NET（网络）、Mount（文件系统）等 6 种命名空间，使容器拥有独立的 “系统视图”。</li><li><code>Cgroups</code>：进行资源限制，控制容器对 CPU、内存、磁盘 IO 等资源的使用上限，避免资源竞争。</li><li><code>Unionfs</code>：设计镜像分层机制，通过只读层 + 可写层的组合，实现镜像的高效存储与复用。</li></ul><h2 id="Docker-运行原理与架构">Docker 运行原理与架构</h2><p>Docker 作为早期容器技术的代表，简化了容器的创建与管理流程。其核心架构包括：</p><ul><li>Docker Client：命令行交互工具（如docker run）</li><li>dockerd：守护进程，负责接收客户端请求并调度底层组件</li><li>containerd：从 Docker 拆分出的核心组件，负责容器生命周期管理（创建、启动、销毁）、镜像拉取等</li><li>runc：容器运行时的具体实现，基于 OCI 标准，直接与 Linux 内核交互</li><li>Docker 工作流程：用户通过<code>docker run发起请求→dockerd 转发至 containerd→containerd 调用 runc 创建容器→借助 Namespace 和 Cgroups 实现隔离与限制</code></li></ul><h2 id="容器技术编年史">容器技术编年史</h2><p>2008 年：Linux 内核引入 Cgroups，为资源限制奠定基础。<br>2013 年：Docker 开源，首次将容器技术推向大众，简化了容器创建流程。<br>2015 年：OCI（开放容器倡议）成立，制定容器镜像与运行时标准，runc 成为参考实现。<br>2016 年：containerd 从 Docker 拆分，成为独立项目并加入 CNCF。<br>2021 年：Kubernetes 1.24 移除 dockershim，正式弃用 Docker 作为运行时，推荐 containerd。</p><h1>containerd(容器运行时的核心角色)</h1><h2 id="containerd-的定位与作用">containerd 的定位与作用</h2><p>containerd 是一个轻量级、高性能的容器运行时，专注于容器生命周期的完整管理，核心功能包括：</p><ul><li>容器生命周期管理（创建、启动、停止、销毁）</li><li>镜像管理（拉取、推送、存储）</li><li>与底层运行时（如 runc）交互，执行容器实际操作</li><li>网络与存储管理，为容器提供隔离的网络环境与持久化存储</li><li>作为符合 CRI（容器运行时接口）规范的组件，containerd 可无缝集成 Kubernetes、Swarm 等编排工具，成为云原生基础设施的核心底层组件</li></ul><h2 id="containerd-与-Docker、K8s的关系">containerd 与 Docker、K8s的关系</h2><p>三者在技术栈中属于不同层级，关系如下：</p><ul><li>Docker：上层工具，整合了 containerd、镜像构建、CLI 等功能，面向开发者提供完整工作流（如docker build、docker run）。</li><li>containerd：底层运行时，是 Docker 的核心依赖，同时也是 K8s推荐的运行时（通过 CRI 接口对接）。</li><li>K8s：编排层，通过 kubelet 与 containerd 交互，管理集群中容器的调度与扩缩容。</li></ul><p>调用链对比：</p><blockquote><p>Docker 作为 K8s运行时：kubelet → dockershim → dockerd → containerd → runc<br>containerd 作为 K8s 运行时：kubelet → cri-plugin → containerd →runc（链路更短，性能更优）</p></blockquote><h1>K8s</h1><p>Kubernetes（简称 K8s）是一款开源的容器编排平台，能自动化管理容器的部署、扩展、调度及运维，通过 Pod、Service、Ingress 等资源抽象，实现大规模容器集群的高效管理，是云原生技术栈的核心基石。</p><h2 id="K8s">K8s</h2><a class="btn-beautify pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><hr><h1>总结</h1><p>以上就是今天要讲的内容，本文仅仅简单介绍了pandas的使用，而pandas提供了大量能使我们快速便捷地处理数据的函数和方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/21/hello-world/"/>
      <url>/2025/08/21/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World2</title>
      <link href="/2025/08/21/hello-world2/"/>
      <url>/2025/08/21/hello-world2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>makenew</title>
      <link href="/2025/08/07/makenew/"/>
      <url>/2025/08/07/makenew/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="1-目的">1 目的</h3><blockquote><ul><li>数据传输：一个进程需要将其数据发送给另一个进程</li><li>资源共享：多个进程间共享同样的资源</li><li>通知机制：一个进程需要向另一个或另一组进程发送消息，通知其发生了某些事</li><li>进程控制：有些进程需要完全控制另一个进程的执行，此时控制进程希望可以拦截另一个进程的所有陷入和异常，且可以及时知道它的状态改变。</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
